Constrained Optimizaton Modelling on Resource Allocation for Distributed Systems

1 Problem Statement This work intend to extend the results on resource allocation algorithm in [Sti10]. We try to involve lattices theory to model the constraints more efficient when framing the resource allocation problem for shared hosting platform.

2 State of the Art Resource Allocation Algorithm on shared hosting platforms has been detailed discussed in [Sti10]. It provided efficient algorithms to handle the resource allocation problem for a static workload of service by modelling as a constraint optimisation problem. A different approach by using arc-flow formulation with graph compression to solve its prototype problem, the bin packing problem, has been researched and developed recently in [BP13].

3 Key Research Ideas Instead of defining a 2-D array eih to indicate the distribution of each service on each server, we only define an array of servers sh and use the values of those variables to indicate the services allocated on it. In another word, the value of the variable for server is a set of numbers. The main advantage of this approach is we can represent the original domain of this variable as a lattice [Bottom, Top] composed by inclusion order or more precisely say power-set as mentioned in definition 3. In this case, the Bottom is {} means this server not be allocated to any service whilst the Top is {1,2,...,N} means this server is allocated to all services. Then some constraints can be easily formulated. For instance, we can represent a service only allocated to a single server by: ∀h,⊓sh ={} Then state the constraint on the yield of service to resource as: ∀i∈sh, yih >0 Follow that, we can use the similar formulations as described in MILP in [Sti10] to achieve the other constraints. It may be not very meaningful(or say useful) under the condition that all the servers are symmetric and can provide all types of resources, but we can still use it to reduce the domains of yields in this case. While on the other hand, it will be very efficient on a special practical scenario which different servers can provide different types and amount of resources.

4 Project Work Plan We describe the research plan of the above approach in this section. As for modelling the lattices, there are two parallel work at the beginning stage. One is to formulate all the constraints needed based on the lattices-model. We should define a discrete metric (dm), or say minimum significant bit when formulating the yield as a lattice. For instance, if we assume am =10%, the Top in the domain of the yield-lattice will be {10%, 20%,...1}. Another work in this step may be implementing a prototype programme such as using the lattice- modelling to solve a basic bin packing, or vector packing problem and design a benchmark to compare the performance with a programme implemented by a typical linear-programming model. The results of this testing should be useful to guide the initial modelling process of the real resource allocation problem. The next stage will focus on optimize and implement the lattice model. We need to test a suitable dm and implement the constraints by real coding. Many constraint-solver contains a class of set variable, such as the SetVar in Java-Choco. Then, we need another benchmark to compare the performance of this model with the MILP model under the same searching algorithms, say we don’t change the searching method in this approach.